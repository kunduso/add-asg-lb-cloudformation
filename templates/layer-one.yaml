AWSTemplateFormatVersion: "2010-09-09"
Description: Basic layer one resources
Parameters: 
  Name: 
    Type: String
    Description: The name prefix for all resources.
    Default: ""
  CustomInstanceType: 
    Type: String
    Description: The instance type of the Amazon EC2 instances.
    Default: ""
  CustomImageId: 
    Type: String
    Description: The image id of the Amazon EC2 instances.
    Default: ""
Resources:
  EC2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub LayerOne-${Name}-EC2
      GroupDescription: Layer One EC2 Security Group
      VpcId: {'Fn::ImportValue': !Sub 'layer-zero-VPCId'}
      Tags:
        - Key: Name
          Value: !Ref Name

  LBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub LayerOne-${Name}-LB
      GroupDescription: Layer One LB Security Group
      VpcId: {'Fn::ImportValue': !Sub 'layer-zero-VPCId'}
      Tags:
        - Key: Name
          Value: !Ref Name

  LBSecurityGroupIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref LBSecurityGroup
      IpProtocol: tcp
      CidrIp: 0.0.0.0/0
      FromPort: 80
      ToPort: 80

  LBSecurityGroupEgress:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      GroupId: !Ref LBSecurityGroup
      IpProtocol: tcp
      CidrIp: 0.0.0.0/0
      FromPort: 80
      ToPort: 80
    
  EC2SecurityGroupIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref EC2SecurityGroup
      IpProtocol: tcp
      SourceSecurityGroupId: !Ref LBSecurityGroup
      FromPort: 80
      ToPort: 80
      Description: Allow traffic from LB to EC2

  EC2SecurityGroupEgress:
    Type: AWS::EC2::SecurityGroupEgress
    Properties:
      GroupId: !Ref EC2SecurityGroup
      IpProtocol: tcp
      CidrIp: 0.0.0.0/0
      FromPort: 80
      ToPort: 80
      Description: Allow traffic from EC2 to LB

  ApplicationLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: application
      LaunchTemplateData:
        ImageId: !Ref CustomImageId
        InstanceType: !Ref CustomInstanceType
        SecurityGroupIds:
          - !Ref EC2SecurityGroup
        UserData: !Base64 |
          Fn::Sub:
            - ${file("${UserDataTemplate}")}
            UserDataTemplate: "./scripts/user_data.tpl"
        # NetworkInterfaces:
        #   - AssociatePublicIpAddress: "false"
        #     DeviceIndex: 0
        #     Groups:
        #       - !Ref EC2SecurityGroup
        # IamInstanceProfile:
        #   Name: ec2_profile

  ApplicationAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: app-3
      MinSize: 3
      MaxSize: 6
      DesiredCapacity: 3
      HealthCheckGracePeriod: 480
      LaunchTemplate:
        LaunchTemplateId: !Ref ApplicationLaunchTemplate
        Version: !GetAtt [ApplicationLaunchTemplate, LatestVersionNumber]
      VPCZoneIdentifier: [{Fn::ImportValue: !Sub 'layer-zero-PrivateSubnetIds'}]
      #HealthCheckType: ELB
      Tags:
        - Key: Name
          Value: !Ref Name
          PropagateAtLaunch: true
        # - Key: Source
        #   Value: https://github.com/kunduso/add-asg-elb-terraform
          PropagateAtLaunch: true
      LifecycleHookSpecificationList:
        - LifecycleTransition: autoscaling:EC2_INSTANCE_LAUNCHING
          HeartbeatTimeout: 300
          DefaultResult: CONTINUE
          LifecycleHookName: !Ref Name

  ASGPolicyUp:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AutoScalingGroupName: !Ref ApplicationAutoScalingGroup
      PolicyName: asg_policy_up
      ScalingAdjustment: 1
      AdjustmentType: ChangeInCapacity
      Cooldown: 300

  ASGCPUAlarmUp:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: asg_cpu_alarm_up
      ComparisonOperator: GreaterThanOrEqualToThreshold
      EvaluationPeriods: 2
      MetricName: CPUUtilization
      Namespace: AWS/EC2
      Period: 60
      Statistic: Average
      Threshold: 70
      Dimensions:
        - Name: AutoScalingGroupName
          Value: !Ref ApplicationAutoScalingGroup
      AlarmDescription: This metric monitors EC2 CPU utilization
      AlarmActions:
        - !Ref ASGPolicyUp

  ASGPolicyDown:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AutoScalingGroupName: !Ref ApplicationAutoScalingGroup
      PolicyName: asg_policy_down
      ScalingAdjustment: -1
      AdjustmentType: ChangeInCapacity
      Cooldown: 300

  ASGCPUAlarmDown:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: asg_cpu_alarm_down
      ComparisonOperator: GreaterThanOrEqualToThreshold
      EvaluationPeriods: 2
      MetricName: CPUUtilization
      Namespace: AWS/EC2
      Period: 60
      Statistic: Average
      Threshold: 30
      Dimensions:
        - Name: AutoScalingGroupName
          Value: !Ref ApplicationAutoScalingGroup
      AlarmDescription: This metric monitors EC2 CPU utilization
      AlarmActions:
        - !Ref ASGPolicyDown

  EC2Role:
    Type: "AWS::IAM::Role"
    Properties:
      RoleName: !Sub '${Name}_ec2_role'
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service: "ec2.amazonaws.com"
            Action: "sts:AssumeRole"

  EC2InstanceProfile:
    Type: "AWS::IAM::InstanceProfile"
    Properties:
      InstanceProfileName: "ec2_profile"
      Roles:
        - Ref: "EC2Role"
